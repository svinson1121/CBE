import React, { useState } from "react";
import { createCbs, createEtws } from "../api/api";

const GEO_SCOPES = [
  "cell_wide_immediate",
  "plmn_wide",
  "lac_sac_tac_wide",
  "cell_wide",
];

const CATEGORIES = ["normal", "high_priority", "background"];
const CHARACTER_SETS = ["gsm", "8bit", "ucs2"];

const WARNING_TYPES = [
  "earthquake",
  "tsunami",
  "earthquake_and_tsunami",
  "test",
  "other",
  "rfu",
];

function CBCForm() {
  const [form, setForm] = useState({
    cbe_name: "cbc_apitool",
    category: "normal",
    repetition_period: 5,
    num_of_bcast: 999,
    plmn: "",
    message_id: "",
    geo_scope: "plmn_wide",
    msg_code: "",
    update_nr: 0,
    character_set: "gsm",
    data_utf8: "",
  });

  const onChange = (field: string, value: any) => {
    setForm((f) => ({ ...f, [field]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    try {
      const payload = {
        cbe_name: form.cbe_name,
        category: form.category,
        repetition_period: form.repetition_period,
        num_of_bcast: form.num_of_bcast,
        scope: {
          scope_plmn: form.plmn ? { [form.plmn]: {} } : {},
        },
        smscb_message: {
          message_id: Number(form.message_id),
          serial_nr: {
            serial_nr_decoded: {
              geo_scope: form.geo_scope,
              msg_code: Number(form.msg_code),
              update_nr: Number(form.update_nr),
            },
          },
          payload: {
            payload_decoded: {
              character_set: form.character_set,
              data_utf8: form.data_utf8,
            },
          },
        },
      };

      const res = await createCbs(payload);
      alert("CBC Message submitted successfully!");
      console.log(res);
    } catch (error) {
      alert("Failed to submit CBC Message");
      console.error(error);
    }
  };

  return (
    <form onSubmit={handleSubmit} style={{ marginTop: 20 }}>
      <h3>CBC Message</h3>

      <label>
        Category:
        <select
          value={form.category}
          onChange={(e) => onChange("category", e.target.value)}
        >
          {CATEGORIES.map((c) => (
            <option key={c} value={c}>
              {c}
            </option>
          ))}
        </select>
      </label>

      <label>
        Repetition Period (1-4095):
        <input
          type="number"
          min={1}
          max={4095}
          value={form.repetition_period}
          onChange={(e) => onChange("repetition_period", Number(e.target.value))}
          required
        />
      </label>

      <label>
        Number of Broadcasts (0-65535):
        <input
          type="number"
          min={0}
          max={65535}
          value={form.num_of_bcast}
          onChange={(e) => onChange("num_of_bcast", Number(e.target.value))}
          required
        />
      </label>

      <label>
        PLMN (optional):
        <input
          type="text"
          value={form.plmn}
          onChange={(e) => onChange("plmn", e.target.value)}
        />
      </label>

      <label>
        Message ID (0-65535):
        <input
          type="number"
          min={0}
          max={65535}
          value={form.message_id}
          onChange={(e) => onChange("message_id", e.target.value)}
          required
        />
      </label>

      <label>
        Geographic Scope:
        <select
          value={form.geo_scope}
          onChange={(e) => onChange("geo_scope", e.target.value)}
          required
        >
          {GEO_SCOPES.map((scope) => (
            <option key={scope} value={scope}>
              {scope}
            </option>
          ))}
        </select>
      </label>

      <label>
        Message Code (0-1023):
        <input
          type="number"
          min={0}
          max={1023}
          value={form.msg_code}
          onChange={(e) => onChange("msg_code", e.target.value)}
          required
        />
      </label>

      <label>
        Update Number (0-15):
        <input
          type="number"
          min={0}
          max={15}
          value={form.update_nr}
          onChange={(e) => onChange("update_nr", Number(e.target.value))}
          required
        />
      </label>

      <label>
        Character Set:
        <select
          value={form.character_set}
          onChange={(e) => onChange("character_set", e.target.value)}
          required
        >
          {CHARACTER_SETS.map((cs) => (
            <option key={cs} value={cs}>
              {cs}
            </option>
          ))}
        </select>
      </label>

      <label>
        Message Content:
        <textarea
          rows={4}
          value={form.data_utf8}
          onChange={(e) => onChange("data_utf8", e.target.value)}
          required
        />
      </label>

      <button type="submit">Submit CBC Message</button>
    </form>
  );
}

function ETWSForm() {
  const [form, setForm] = useState({
    cbe_name: "cbc_apitool",
    category: "normal",
    repetition_period: 5,
    num_of_bcast: 999,
    warning_period_sec: 0,
    message_id: "",
    geo_scope: "plmn_wide",
    msg_code: "",
    update_nr: 0,
    warning_type: "earthquake",
    emergency_user_alert: true,
    popup_on_display: true,
  });

  const onChange = (field: string, value: any) => {
    setForm((f) => ({ ...f, [field]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    try {
      const payload = {
        cbe_name: form.cbe_name,
        category: form.category,
        repetition_period: form.repetition_period,
        num_of_bcast: form.num_of_bcast,
        warning_period_sec: form.warning_period_sec,
        scope: { scope_plmn: {} },
        smscb_message: {
          message_id: Number(form.message_id),
          serial_nr: {
            serial_nr_decoded: {
              geo_scope: form.geo_scope,
              msg_code: Number(form.msg_code),
              update_nr: Number(form.update_nr),
            },
          },
          payload: {
            payload_etws: {
              warning_type: {
                warning_type_decoded: form.warning_type,
              },
              emergency_user_alert: form.emergency_user_alert,
              popup_on_display: form.popup_on_display,
            },
          },
        },
      };

      const res = await createEtws(payload);
      alert("ETWS Message submitted successfully!");
      console.log(res);
    } catch (error) {
      alert("Failed to submit ETWS Message");
      console.error(error);
    }
  };

  return (
    <form onSubmit={handleSubmit} style={{ marginTop: 20 }}>
      <h3>ETWS Message</h3>

      <label>
        Category:
        <select
          value={form.category}
          onChange={(e) => onChange("category", e.target.value)}
        >
          {CATEGORIES.map((c) => (
            <option key={c} value={c}>
              {c}
            </option>
          ))}
        </select>
      </label>

      <label>
        Repetition Period (1-4095):
        <input
          type="number"
          min={1}
          max={4095}
          value={form.repetition_period}
          onChange={(e) => onChange("repetition_period", Number(e.target.value))}
          required
        />
      </label>

      <label>
        Number of Broadcasts (0-65535):
        <input
          type="number"
          min={0}
          max={65535}
          value={form.num_of_bcast}
          onChange={(e) => onChange("num_of_bcast", Number(e.target.value))}
          required
        />
      </label>

      <label>
        Warning Period Seconds (0-3600):
        <input
          type="number"
          min={0}
          max={3600}
          value={form.warning_period_sec}
          onChange={(e) => onChange("warning_period_sec", Number(e.target.value))}
        />
      </label>

      <label>
        Message ID (0-65535):
        <input
          type="number"
          min={0}
          max={65535}
          value={form.message_id}
          onChange={(e) => onChange("message_id", e.target.value)}
          required
        />
      </label>

      <label>
        Geographic Scope:
        <select
          value={form.geo_scope}
          onChange={(e) => onChange("geo_scope", e.target.value)}
          required
        >
          {GEO_SCOPES.map((scope) => (
            <option key={scope} value={scope}>
              {scope}
            </option>
          ))}
        </select>
      </label>

      <label>
        Message Code (0-1023):
        <input
          type="number"
          min={0}
          max={1023}
          value={form.msg_code}
          onChange={(e) => onChange("msg_code", e.target.value)}
          required
        />
      </label>

      <label>
        Update Number (0-15):
        <input
          type="number"
          min={0}
          max={15}
          value={form.update_nr}
          onChange={(e) => onChange("update_nr", Number(e.target.value))}
          required
        />
      </label>

      <label>
        Warning Type:
        <select
          value={form.warning_type}
          onChange={(e) => onChange("warning_type", e.target.value)}
          required
        >
          {WARNING_TYPES.map((w) => (
            <option key={w} value={w}>
              {w}
            </option>
          ))}
        </select>
      </label>

      <label>
        Emergency User Alert:
        <input
          type="checkbox"
          checked={form.emergency_user_alert}
          onChange={(e) => onChange("emergency_user_alert", e.target.checked)}
        />
      </label>

      <label>
        Popup on Display:
        <input
          type="checkbox"
          checked={form.popup_on_display}
          onChange={(e) => onChange("popup_on_display", e.target.checked)}
        />
      </label>

      <button type="submit">Submit ETWS Message</button>
    </form>
  );
}

export default function Main() {
  const [messageType, setMessageType] = useState("");

  return (
    <div>
      <label htmlFor="messageType">
        <strong>Message Type: </strong>
      </label>
      <select
        id="messageType"
        value={messageType}
        onChange={(e) => setMessageType(e.target.value)}
      >
        <option value="">-- Select --</option>
        <option value="CBC">CBC</option>
        <option value="ETWS">ETWS</option>
      </select>

      <div style={{ marginTop: 20 }}>
        {messageType === "CBC" && <CBCForm />}
        {messageType === "ETWS" && <ETWSForm />}
      </div>
    </div>
  );
}

